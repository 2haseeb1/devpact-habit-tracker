// prisma/seed.ts

import { PrismaClient } from "@prisma/client";
import { faker } from "@faker-js/faker";

const prisma = new PrismaClient();

// "Habit Tracker" ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶∞‡ßç‡¶•‡¶™‡ßÇ‡¶∞‡ßç‡¶£ Habit ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤, ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ô
const habitTemplates = [
  {
    title: "Code for 1 hour every day",
    tags: ["#coding", "#consistency"],
    color: "#ef4444",
  },
  {
    title: "Read a chapter of a technical book",
    tags: ["#learning", "#reading", "#career"],
    color: "#f97316",
  },
  {
    title: "Complete one LeetCode problem",
    tags: ["#dsa", "#interviewprep"],
    color: "#eab308",
  },
  {
    title: "Work on my side project",
    tags: ["#project", "#buildinpublic"],
    color: "#84cc16",
  },
  {
    title: "Write a tech blog post weekly",
    tags: ["#writing", "#content"],
    frequency: "weekly",
    color: "#22c55e",
  },
  {
    title: "Contribute to an open-source project",
    tags: ["#opensource", "#community"],
    color: "#14b8a6",
  },
  {
    title: "Exercise for 30 minutes",
    tags: ["#health", "#wellness"],
    color: "#3b82f6",
  },
  {
    title: "Review PRs for my team",
    tags: ["#work", "#teamwork"],
    color: "#8b5cf6",
  },
];

async function main() {
  console.log("üå± Starting to seed the database...");

  // --- ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßç‡¶∞‡¶Æ‡ßá) ---
  console.log("üßπ Clearing old data...");
  await prisma.kudo.deleteMany();
  await prisma.habitLog.deleteMany();
  await prisma.habit.deleteMany();
  await prisma.account.deleteMany();
  await prisma.session.deleteMany();
  await prisma.user.deleteMany();
  console.log("‚úÖ Old data cleared successfully.");

  // --- ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ---
  console.log("üë§ Creating users...");
  const users = await Promise.all(
    Array.from({ length: 10 }).map(() =>
      prisma.user.create({
        data: {
          name: faker.person.fullName(),
          username: faker.internet
            .username()
            .toLowerCase()
            .replace(/[\W_]+/g, ""),
          email: faker.internet.email().toLowerCase(),
          image: faker.image.avatar(),
          emailVerified: faker.date.past(),
        },
      })
    )
  );
  console.log(`‚úÖ Created ${users.length} users.`);

  // --- Habits ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ---
  console.log("ü§ù Creating meaningful habits...");
  const habits = [];
  for (const user of users) {
    // ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡ß® ‡¶•‡ßá‡¶ï‡ßá ‡ß©‡¶ü‡¶ø ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá
    const userHabitTemplates = faker.helpers
      .shuffle(habitTemplates)
      .slice(0, faker.number.int({ min: 2, max: 3 }));
    for (const template of userHabitTemplates) {
      const habit = await prisma.habit.create({
        data: {
          authorId: user.id,
          title: template.title,
          description: faker.lorem.sentence(),
          isPublic: faker.datatype.boolean(0.7), // ‡ß≠‡ß¶% ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶π‡¶¨‡ßá
          tags: template.tags,
          color: template.color,
          frequency: template.frequency ?? "daily",
        },
      });
      habits.push(habit);
    }
  }
  console.log(`‚úÖ Created ${habits.length} habits.`);

  // --- Habit Logs ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ---
  console.log("üìù Creating realistic habit logs...");
  const habitLogs = [];
  // ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶ß‡¶æ‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  const now = new Date();
  const aMonthAgo = new Date();
  aMonthAgo.setDate(now.getDate() - 30);

  for (const habit of habits) {
    // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ó‡¶§ ‡ß©‡ß¶ ‡¶¶‡¶ø‡¶®‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶≤‡¶ó ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    for (let i = 0; i < 30; i++) {
      // ‡ßÆ‡ß¶% ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶Ø‡ßá ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏‡¶ü‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
      if (Math.random() < 0.8) {
        const logDate = new Date(aMonthAgo);
        logDate.setDate(logDate.getDate() + i);
        // ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá‡¶á ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡¶ü‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        logDate.setHours(0, 0, 0, 0);

        // ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶≤‡¶ó ‡¶§‡ßà‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶ï
        const existingLog = await prisma.habitLog.findFirst({
          where: {
            habitId: habit.id,
            authorId: habit.authorId,
            date: logDate,
          },
        });

        if (!existingLog) {
          const log = await prisma.habitLog.create({
            data: {
              habitId: habit.id,
              authorId: habit.authorId,
              date: logDate,
              isCompleted: true,
              notes: faker.datatype.boolean(0.15)
                ? faker.lorem.sentence()
                : null,
            },
          });
          habitLogs.push(log);
        }
      }
    }
  }
  console.log(`‚úÖ Created ${habitLogs.length} habit logs.`);

  // --- Kudos ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ---
  console.log("üíñ Giving some kudos...");
  let kudoCount = 0;
  if (habits.length > 0) {
    for (const habit of habits) {
      // ‡ß¶ ‡¶•‡ßá‡¶ï‡ßá ‡ß´ ‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ‡¶≠‡¶æ‡¶¨‡ßá Kudo ‡¶¶‡ßá‡¶¨‡ßá
      const kudoGivers = faker.helpers
        .shuffle(users)
        .slice(0, faker.number.int({ min: 0, max: 5 }));

      for (const user of kudoGivers) {
        if (user.id !== habit.authorId) {
          await prisma.kudo.create({
            data: {
              habitId: habit.id, // Kudo ‡¶è‡¶ñ‡¶® Habit-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§
              userId: user.id,
            },
          });
          kudoCount++;
        }
      }
    }
  }
  console.log(`‚úÖ Gave ${kudoCount} kudos.`);

  console.log("üéâ Seeding finished successfully!");
}

main()
  .catch((e) => {
    console.error("‚ùå An error occurred while seeding the database:");
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
